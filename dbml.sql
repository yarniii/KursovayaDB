-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS musiclabel."Albums_Singers"
(
    "Albums_id_album" integer NOT NULL,
    "Singers_id_singer" integer NOT NULL
);

CREATE TABLE IF NOT EXISTS musiclabel."Singers_songs"
(
    "Singers_id_singer" integer NOT NULL,
    songs_id_song integer NOT NULL
);

CREATE TABLE IF NOT EXISTS musiclabel."Sotrudniki_Cities"
(
    "Sotrudniki_id_Sotrudnika" integer NOT NULL,
    "Cities_id_city" integer NOT NULL
);

CREATE TABLE IF NOT EXISTS musiclabel."Sotrudniki_Departments"
(
    "Sotrudniki_id_Sotrudnika" integer NOT NULL,
    "Departments_id_depatment" integer NOT NULL
);

CREATE TABLE IF NOT EXISTS musiclabel."Sotrudniki_Positions"
(
    "Sotrudniki_id_Sotrudnika" integer NOT NULL,
    "Positions_id_postion" integer NOT NULL
);

CREATE TABLE IF NOT EXISTS musiclabel.albums
(
    id_album integer NOT NULL,
    id_song integer NOT NULL,
    id_singer integer NOT NULL,
    name_album character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Albums_pkey" PRIMARY KEY (id_album)
);

CREATE TABLE IF NOT EXISTS musiclabel.cities
(
    id_city integer NOT NULL,
    city character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Cities_pkey" PRIMARY KEY (id_city)
);

CREATE TABLE IF NOT EXISTS musiclabel.contracts
(
    id_contract integer NOT NULL,
    id_singer integer NOT NULL,
    date_start date NOT NULL,
    date_end date NOT NULL,
    id_sotrudnika integer NOT NULL,
    CONSTRAINT "Contracts_pkey" PRIMARY KEY (id_contract)
);

CREATE TABLE IF NOT EXISTS musiclabel.departments
(
    id_depatment integer NOT NULL,
    name_department character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Departments_pkey" PRIMARY KEY (id_depatment)
);

CREATE TABLE IF NOT EXISTS musiclabel.positions
(
    id_postion integer NOT NULL,
    name_position character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Positions_pkey" PRIMARY KEY (id_postion)
);

CREATE TABLE IF NOT EXISTS musiclabel.singers
(
    id_singer integer NOT NULL,
    nickname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT "Singers_pkey" PRIMARY KEY (id_singer)
);

CREATE TABLE IF NOT EXISTS musiclabel.songs
(
    id_song integer NOT NULL,
    name_song character varying(30) COLLATE pg_catalog."default" NOT NULL,
    id_singer integer NOT NULL,
    id_album integer NOT NULL,
    CONSTRAINT songs_pkey PRIMARY KEY (id_song)
);

CREATE TABLE IF NOT EXISTS musiclabel.sotrudniki
(
    id_sotrudnika integer NOT NULL,
    firstname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    surname character varying(30) COLLATE pg_catalog."default" NOT NULL,
    bithday date NOT NULL,
    code_position integer NOT NULL,
    code_city integer NOT NULL,
    code_department integer NOT NULL,
    CONSTRAINT "Sotrudniki_id_Sotrudnika_key" UNIQUE (id_sotrudnika)
);

ALTER TABLE IF EXISTS musiclabel."Albums_Singers"
    ADD CONSTRAINT "Albums_Singers_Albums_id_album_fkey" FOREIGN KEY ("Albums_id_album")
    REFERENCES musiclabel.albums (id_album) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Albums_Singers"
    ADD CONSTRAINT "Albums_Singers_Singers_id_singer_fkey" FOREIGN KEY ("Singers_id_singer")
    REFERENCES musiclabel.singers (id_singer) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Singers_songs"
    ADD CONSTRAINT "Singers_songs_Singers_id_singer_fkey" FOREIGN KEY ("Singers_id_singer")
    REFERENCES musiclabel.singers (id_singer) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Singers_songs"
    ADD CONSTRAINT "Singers_songs_songs_id_song_fkey" FOREIGN KEY (songs_id_song)
    REFERENCES musiclabel.songs (id_song) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Sotrudniki_Cities"
    ADD CONSTRAINT "Sotrudniki_Cities_Cities_id_city_fkey" FOREIGN KEY ("Cities_id_city")
    REFERENCES musiclabel.cities (id_city) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Sotrudniki_Cities"
    ADD CONSTRAINT "Sotrudniki_Cities_Sotrudniki_id_Sotrudnika_fkey" FOREIGN KEY ("Sotrudniki_id_Sotrudnika")
    REFERENCES musiclabel.sotrudniki (id_sotrudnika) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Sotrudniki_Departments"
    ADD CONSTRAINT "Sotrudniki_Departments_Departments_id_depatment_fkey" FOREIGN KEY ("Departments_id_depatment")
    REFERENCES musiclabel.departments (id_depatment) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Sotrudniki_Departments"
    ADD CONSTRAINT "Sotrudniki_Departments_Sotrudniki_id_Sotrudnika_fkey" FOREIGN KEY ("Sotrudniki_id_Sotrudnika")
    REFERENCES musiclabel.sotrudniki (id_sotrudnika) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Sotrudniki_Positions"
    ADD CONSTRAINT "Sotrudniki_Positions_Positions_id_postion_fkey" FOREIGN KEY ("Positions_id_postion")
    REFERENCES musiclabel.positions (id_postion) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel."Sotrudniki_Positions"
    ADD CONSTRAINT "Sotrudniki_Positions_Sotrudniki_id_Sotrudnika_fkey" FOREIGN KEY ("Sotrudniki_id_Sotrudnika")
    REFERENCES musiclabel.sotrudniki (id_sotrudnika) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel.contracts
    ADD CONSTRAINT "Contracts_id_singer_fkey" FOREIGN KEY (id_singer)
    REFERENCES musiclabel.singers (id_singer) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel.contracts
    ADD CONSTRAINT "Contracts_id_sotrudnika_fkey" FOREIGN KEY (id_sotrudnika)
    REFERENCES musiclabel.sotrudniki (id_sotrudnika) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;


ALTER TABLE IF EXISTS musiclabel.songs
    ADD CONSTRAINT songs_id_song_fkey FOREIGN KEY (id_song)
    REFERENCES musiclabel.albums (id_album) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION
    NOT VALID;
CREATE INDEX IF NOT EXISTS songs_pkey
    ON musiclabel.songs(id_song);

END;